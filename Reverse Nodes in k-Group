/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int findLen(ListNode* head)
    {
        if(!head)
            return 0;
        
        ListNode* t = head;
        int cnt = 0;
        while(t)
        {
            t=t->next;
            cnt++;
        }
        return cnt;
    }
    ListNode* reverse(ListNode* head, int k,int l)
    {
        if(head == NULL || head->next == NULL || l < k)
            return head;
        
        ListNode *curr = head;
        ListNode *prev = NULL;
        ListNode *next = NULL;
        int count = 0;
        
        while(curr != NULL && count < k)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        
        if(next)
           head->next = reverse(next,k,l-k);
        
        return prev;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        int l = findLen(head);
        ListNode *res = reverse(head,k,l);
        
        return res;
    }
};